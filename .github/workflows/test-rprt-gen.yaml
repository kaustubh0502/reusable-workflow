name: Reusable Dynamic Storage Hosting Workflow

on:
  workflow_call: {}

env:
  STORAGE_ACCOUNT_NAME: onelookapptstrprtgen  # Hardcoded storage account name
  RESOURCE_GROUP_NAME: github-actions-rg  # Hardcoded resource group name
  REPO_NAME: ${{ github.repository }}
  BRANCH_NAME: ${{ github.head_ref }}

jobs:
  DynamicStorageHosting:
    if: github.event.action != 'closed'
    permissions:
      id-token: write
      contents: write
      checks: write
      pages: write
      pull-requests: write
    runs-on: k8s-runner-azure-non-prod # Self-hosted runner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install azcli
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Log in to Azure
        run: |
          az login --identity --username "${{ secrets.CLIENT_ID }}"

      - name: Check the IP
        run: |
          echo "MY_RUNNER_IP=$(curl http://ifconfig.me)" >> $GITHUB_ENV

      - name: Azure subscription show
        run: |
          az account show

      - name: Check Storage Account Existence
        id: check-storage
        run: |
          if az storage account show --name ${{ env.STORAGE_ACCOUNT_NAME }} --query "name" &>/dev/null; then
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Create Storage Account (if needed)
        if: env.exists == 'false'
        run: |
          az storage account create \
            --name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --location eastus \
            --sku Standard_LRS \
            --allow-blob-public-access true

          az storage blob service-properties update \
            --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --static-website \
            --index-document index.html

          az storage account update \
            --name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --default-action Deny

          for ip in ${{ env.MY_RUNNER_IP}} ${{ secrets.PERIMETER_IP }}; do
            az storage account network-rule add \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
              --ip-address $ip
          done

      - name: Sleep for 30 seconds
        run: sleep 30

      - name: Sanitize Branch name
        run: |
          REPO_NAME_SANITIZED=$(echo "${{ env.REPO_NAME }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g')
          echo "REPO_NAME_SANITIZED=$REPO_NAME_SANITIZED" >> $GITHUB_ENV
          BRANCH_NAME_SANITIZED=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g')
          echo "BRANCH_NAME_SANITIZED=$BRANCH_NAME_SANITIZED" >> $GITHUB_ENV

      - name: Generate storage key
        run: |
          STORAGE_KEY=$(az storage account keys list --account-name ${{ env.STORAGE_ACCOUNT_NAME}} --query '[0].value' -o tsv)
          echo "STORAGE_KEY=${STORAGE_KEY}" >> $GITHUB_ENV

      - name: Update permissions for blob
        run: |
          az storage container set-permission \
            --name '$web' \
            --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --public-access container \
            --account-key ${{ env.STORAGE_KEY }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Upload to container
        run: |
          REPO_NAME_EXTRACTED=$(echo "${{ env.REPO_NAME }}" | cut -d'/' -f2)
          az storage blob upload-batch \
            --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --source /runner/_work/${REPO_NAME_EXTRACTED}/${REPO_NAME_EXTRACTED} \
            --destination '$web'/${{ env.REPO_NAME_SANITIZED }}/${{ env.BRANCH_NAME_SANITIZED }}/code-coverage-report \
            --account-key ${{ env.STORAGE_KEY }} \
            --overwrite

      - name: Generate the URL
        id: deployment
        run: |
          echo "url=https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/\$web/${{ env.REPO_NAME_SANITIZED }}/${{ env.BRANCH_NAME_SANITIZED }}/code-coverage-report/index.html" >> $GITHUB_ENV

      - name: Display Blob URL in Actions Summary
        run: |
          echo "Artifacts have been uploaded successfully. You can view them here" >> $GITHUB_STEP_SUMMARY
          echo "[View Artifacts](https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/\$web/${{ env.REPO_NAME_SANITIZED }}/${{ env.BRANCH_NAME_SANITIZED }}/code-coverage-report/index.html)" >> $GITHUB_STEP_SUMMARY

  delete-artifacts:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    permissions:
      id-token: write
      contents: write
    runs-on: k8s-runner-azure-non-prod
    steps:
      - name: Install azcli
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Log in to Azure
        run: |
          az login --identity --username ${{ secrets.CLIENT_ID }}

      - name: Sanitize Branch name
        run: |
          REPO_NAME_SANITIZED_BEFORE_DELETE=$(echo "${{ env.REPO_NAME }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g')
          echo "REPO_NAME_SANITIZED_BEFORE_DELETE=$REPO_NAME_SANITIZED_BEFORE_DELETE" >> $GITHUB_ENV
          BRANCH_NAME_SANITIZED_BEFORE_DELETE=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g')
          echo "BRANCH_NAME_SANITIZED_BEFORE_DELETE=$BRANCH_NAME_SANITIZED_BEFORE_DELETE" >> $GITHUB_ENV

      - name: Delete Artifacts
        run: |
          az storage blob delete-batch \
            --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --source '$web' \
            --pattern ${{ env.REPO_NAME_SANITIZED_BEFORE_DELETE }}/${{ env.BRANCH_NAME_SANITIZED_BEFORE_DELETE }}/code-coverage-report/*
